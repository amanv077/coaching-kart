// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  userId        String          @unique @default(cuid()) // Custom userId field
  name          String
  email         String          @unique
  password      String
  phoneNumber   String?
  city          String?
  classLevel    String?
  age           Int?
  schoolOrCollege String?
  lookingFor    LookingFor?     @default(Both)
  roles         UserRole[]      // Multiple roles allowed
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // NextAuth relations
  accounts      Account[]
  sessions      Session[]
  
  // Course enrollments
  enrolledCourses CourseEnrollment[]
  
  // Orders and purchases  
  orders        Order[]
  
  // Reviews given by user
  reviews       Review[]
  
  // Demo session bookings
  demoSessionBookings DemoSessionBooking[]
  
  // Owned coachings (if user has coaching role)
  ownedCoachings Coaching[]      @relation("CoachingOwner")
  
  @@map("users")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  role   Role
  
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, role])
  @@map("user_roles")
}

enum Role {
  STUDENT
  COACH
  ADMIN
}

enum LookingFor {
  Online
  Offline
  Both
}

model Coaching {
  id              String   @id @default(cuid())
  coachingId      String   @unique @default(cuid())
  organizationName String  // Main organization/brand name
  ownerName       String
  ownerEmail      String
  ownerPhone      String
  businessType    BusinessType @default(Individual)
  gstNumber       String?
  panNumber       String?
  approved        Boolean  @default(false)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Owner relation
  ownerUserId     String
  owner           User     @relation("CoachingOwner", fields: [ownerUserId], references: [id])
  
  // Multiple coaching profiles/branches
  profiles        CoachingProfile[]
  
  // Reviews for this coaching organization
  reviews         Review[]
  
  @@map("coachings")
}

enum BusinessType {
  Individual
  Partnership
  Company
  Trust
}

model CoachingProfile {
  id                String   @id @default(cuid())
  profileId         String   @unique @default(cuid())
  name              String   // Branch/Profile name
  branchName        String?  // Specific branch identifier
  establishedYear   Int
  tagline           String?
  description       String
  logo              String?
  images            String[] // Array of coaching images
  
  // Location details
  address           String
  landmark          String?
  city              String
  state             String
  pincode           String
  country           String   @default("India")
  
  // Contact details
  contactNumber     String
  alternateNumber   String?
  email             String
  website           String?
  
  // Social media links
  facebookUrl       String?
  instagramUrl      String?
  youtubeUrl        String?
  twitterUrl        String?
  
  // Operating details
  operatingDays     String[] // Array of days ["Monday", "Tuesday", etc.]
  operatingHours    String   // "9:00 AM - 6:00 PM"
  facilities        String[] // Array of facilities
  
  // Teaching staff
  totalTeachers     Int      @default(0)
  teachers          Teacher[]
  
  // Subjects and exams offered
  subjectsOffered   String[] // Array of subjects
  examsOffered      String[] // Array of exams like "JEE", "NEET", etc.
  
  // Approval and status
  approved          Boolean  @default(false)
  isActive          Boolean  @default(true)
  verificationStatus VerificationStatus @default(Pending)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Parent coaching relation
  coachingId        String
  coaching          Coaching @relation(fields: [coachingId], references: [id])
  
  // Courses offered by this profile
  courses           Course[]
  
  // Demo sessions
  demoSessions      DemoSession[]
  
  // Profile-specific reviews
  profileReviews    Review[] @relation("ProfileReviews")
  
  @@unique([coachingId, name])
  @@map("coaching_profiles")
}

enum VerificationStatus {
  Pending
  Verified
  Rejected
}

model Teacher {
  id              String   @id @default(cuid())
  teacherId       String   @unique @default(cuid())
  name            String
  qualification   String
  specialization  String[] // Array of subjects they specialize in
  experience      Int      // Years of experience
  profileImage    String?
  bio             String?
  
  // Contact (optional)
  email           String?
  phone           String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Coaching profile relation
  profileId       String
  profile         CoachingProfile @relation(fields: [profileId], references: [id])
  
  // Courses taught
  courses         Course[]
  
  @@map("teachers")
}

model Course {
  id                String   @id @default(cuid())
  courseId          String   @unique @default(cuid())
  courseName        String
  courseCode        String?  // Optional course code
  courseDuration    String
  courseDescription String
  courseAmount      Float
  courseDiscount    Float    @default(0)
  courseMRP         Float
  image             String?
  rating            Float    @default(0)
  totalRatings      Int      @default(0)
  
  // Course details
  subjects          String[] // Array of subjects
  examsPrepared     String[] // Array of exams this course prepares for
  classLevel        String   // "Class 11", "Class 12", "Graduation", etc.
  courseType        CourseType @default(Regular)
  mode              CourseMode @default(Both)
  
  // Batch information
  batchSize         Int?
  totalSeats        Int?
  availableSeats    Int?
  
  // Schedule
  schedule          String?  // "Mon-Fri 10AM-12PM"
  startDate         DateTime?
  endDate           DateTime?
  
  // Features
  features          String[] // Array of course features
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  profileId         String
  profile           CoachingProfile @relation(fields: [profileId], references: [id])
  
  // Teacher assignments
  teachers          Teacher[]
  
  // Course enrollments
  enrollments       CourseEnrollment[]
  
  // Orders for this course
  orders            Order[]
  
  // Reviews for this course
  reviews           Review[]
  
  // Demo sessions for this course
  demoSessions      DemoSession[]
  
  @@unique([profileId, courseName])
  @@map("courses")
}

enum CourseType {
  Regular
  Crash
  Test_Series
  Doubt_Session
  Personal_Coaching
}

enum CourseMode {
  Online
  Offline
  Both
}

model CourseEnrollment {
  id         String   @id @default(cuid())
  userId     String
  courseId   String
  enrolledAt DateTime @default(now())
  status     EnrollmentStatus @default(Active)
  
  user       User     @relation(fields: [userId], references: [id])
  course     Course   @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

enum EnrollmentStatus {
  Active
  Completed
  Dropped
  Suspended
}

model Review {
  id        String   @id @default(cuid())
  reviewId  String   @unique @default(cuid())
  userId    String
  coachingId String
  profileId String?  // Optional - for profile-specific reviews
  courseId  String?  // Optional - can review coaching/profile without specific course
  rating    Int      // 1-5
  comment   String
  title     String?  // Optional review title
  helpfulCount Int   @default(0)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  coaching  Coaching @relation(fields: [coachingId], references: [id])
  profile   CoachingProfile? @relation("ProfileReviews", fields: [profileId], references: [id])
  course    Course?  @relation(fields: [courseId], references: [id])
  
  @@map("reviews")
}

model Order {
  id              String        @id @default(cuid())
  orderId         String        @unique @default(cuid())
  userId          String
  courseId        String
  amountPaid      Float
  discountApplied Float         @default(0)
  taxAmount       Float         @default(0)
  totalAmount     Float
  paymentStatus   PaymentStatus @default(pending)
  paymentMethod   PaymentMethod
  transactionId   String?
  paymentGateway  String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  user            User          @relation(fields: [userId], references: [id])
  course          Course        @relation(fields: [courseId], references: [id])
  
  @@map("orders")
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum PaymentMethod {
  online
  upi
  card
  wallet
  cash
}

model DemoSession {
  id              String   @id @default(cuid())
  sessionId       String   @unique @default(cuid())
  profileId       String
  courseId        String
  title           String
  description     String?
  mode            SessionMode
  dateTime        DateTime
  durationMinutes Int
  maxParticipants Int      @default(50)
  location        String?  // Required if offline
  meetingLink     String?  // Required if online
  instructor      String
  topics          String[] // Array of topics to be covered
  
  status          SessionStatus @default(Scheduled)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  profile         CoachingProfile @relation(fields: [profileId], references: [id])
  course          Course   @relation(fields: [courseId], references: [id])
  
  // Attendees (many-to-many relation)
  bookings        DemoSessionBooking[]
  
  @@map("demo_sessions")
}

enum SessionMode {
  online
  offline
  hybrid
}

enum SessionStatus {
  Scheduled
  Live
  Completed
  Cancelled
}

model DemoSessionBooking {
  id          String      @id @default(cuid())
  userId      String
  sessionId   String
  bookedAt    DateTime    @default(now())
  status      BookingStatus @default(confirmed)
  attended    Boolean     @default(false)
  feedback    String?
  rating      Int?        // 1-5
  
  user        User        @relation(fields: [userId], references: [id])
  session     DemoSession @relation(fields: [sessionId], references: [id])
  
  @@unique([userId, sessionId])
  @@map("demo_session_bookings")
}

enum BookingStatus {
  confirmed
  cancelled
  completed
  no_show
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
